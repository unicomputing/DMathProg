# keep this here because it is not yet in the released version of DistAlgo
def ints(n1,n2): return range(n1,n2+1)

# place holder for the parts you are to do; may delete after you finish all
def TODO(hint = ''): return 1

# an example: page 184 of textbook: Exercise Set 5.1 ##23
q23 = prodof ( i*(i+2) / ((i-1)*(i+1)), i in ints(2,5) )  # product form in da

from functools import reduce  # this is for writing product form below in py
q23py = reduce ((lambda x,y: x*y), 
                [ i*(i+2) / ((i-1)*(i+1)) for i in range(2,6) ])

print('example --------', q23, q23py, q23 == q23py)

# the example continued: if the product was sum, then you could have written
q23_sum = sumof ( i*(i+2) / ((i-1)*(i+1)), i in ints(2,5) )  # sum form in da
q23py_sum = sum ( i*(i+2) / ((i-1)*(i+1)) for i in range(2,6) )  # sum form in py
print('example --------', q23_sum, q23py_sum, q23_sum == q23py_sum)


# ======== Extra-credit protramming starts here ======== #


# 1 (1). page 184 of textbook: Exercise Set 5.1 #21
# compute the following summation 
q21 = TODO('sum form in da')
q21py = TODO('sum form in py')

print('--------', q21, q21py, q21 == q21py)


# 1 (2). page 184 of textbook: Exercise Set 5.1 #39
# write the following using summation
q39_given = TODO('given formula')
q39 = TODO('your sum form')

print('--------', q39_given, q39, q39_given == q39)


# 1 (3). page 197 of textbook: Exercise Set 5.2 #4(a)
# write P(n) and check if P(2) is true
def p(n):
    return TODO('sum on left of equation') == TODO('formula on right')

print('check base case --------', p(2))


# 1 (4). page 198 of textbook: Exercise Set 5.2 #16 for n = 2
def q16(n):
    return TODO('equation')

print('check base case --------', q16(2))


# 1 (5). page 234 of textbook: Exercise Set 5.5 #4
def d(k):
    if k >= 1: return TODO('recursive case')
    if k == 0: return 3

print('--------', d(0), d(1), d(2), d(3))


# 1 (6). page 247 of textbook: Exercise Set 5.6 #8
def f(k):
    TODO('recursion case and base case')

def q8(n):
    return TODO('your closed form')

def q8_check():
    return each(i in ints(1,5), has= q8(i) == f(i))

print('--------', q8_check(), [ f(i) for i in ints(1,5) ])


# 2. aggregation, recursion, iteration for the product in q16
def q16_aggregate(n):
    return TODO('prod form')

def q16_recurse(k):
    if k == 2: return q16_aggregate(2)
    else: return TODO('recursive case')

def q16_iterate(n):
    prod = TODO('value for n=2')
    for k in ints(TODO('parameter value'),n):
        prod = TODO('multiply next term')
    return prod

def q16_test(n):
    v1 = q16_aggregate(n)
    v2 = q16_recurse(n)
    v3 = q16_iterate(n)
    return (v1, v2, v2 == v1, v3, v3 == v1)

print('q16 3 forms --------', q16_test(5))


# 3. Euclid algorithm written using iteration as in homework 3,
# except that it is put into a function definition for ease of reuse:
def euclid(a, b):
    r = b
    while b != 0:
        r = a % b
        a = b
        b = r
    return a

# Euclid algorithm written using recursion:
def gcd(a, b):
    TODO('base case and recursive case')

def gcd_test(a,b):
    TODO('return result of calling euclid, of calling gcd, and whether they are equal')

print('gcd 2 forms --------', gcd_test(30, 576))


# 4. Hanoi Tower
# show the move of the top disk from A to B
def move(A,B):
    print('--------', A, '-->', B)

# move n disks from A to C through B
def hanoi(n, A, B, C):
    # print(n, A, B, C)  # uncomment this line to watch recursion executing
    if n == 1: move(A, C)
    if n > 1: TODO('recursive case')

print('-------- Hanoi Tower'); hanoi(3, 'A', 'B', 'C')
